@using System.Linq
@using System.Globalization

@model E_learning.Models.Course

@{
    ViewData["Title"] = "Editar Curso";
}

<h2>Editar Curso</h2>

<form asp-action="Edit">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="CourseId" />
    <div class="form-group">
        <label asp-for="Name" class="control-label"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Description" class="control-label"></label>
        <textarea asp-for="Description" class="form-control"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Status" class="control-label"></label>
        <select asp-for="Status" class="form-control">
            <option value="Activo">Activo</option>
            <option value="Inactivo">Inactivo</option>
            <option value="Pendiente">Pendiente</option>
        </select>
        <span asp-validation-for="Status" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="StartDate" class="control-label">Fecha de Inicio</label>
        @* Reverting to type="text" for jQuery UI Datepicker control *@
        <input asp-for="StartDate" type="text" id="startDatePicker" class="form-control" />
        <span asp-validation-for="StartDate" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="EndDate" class="control-label">Fecha de Fin</label>
        @* Reverting to type="text" for jQuery UI Datepicker control *@
        <input asp-for="EndDate" type="text" id="endDatePicker" class="form-control" />
        <span asp-validation-for="EndDate" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="TeacherId" class="control-label"></label>
        <select asp-for="TeacherId" class="form-control" asp-items="ViewBag.TeacherList">
            <option value="">-- Seleccionar Profesor --</option>
        </select>
        <span asp-validation-for="TeacherId" class="text-danger"></span>
    </div>
    <div class="form-group mt-3">
        <input type="submit" value="Guardar Cambios" class="btn btn-primary" />
        <a asp-action="CourseManagement" class="btn btn-secondary">Cancelar</a>
    </div>
</form>

@section Scripts {
    <script>
        $(function () {
            // Function to get today's date without time component
            function getToday() {
                var today = new Date();
                today.setHours(0, 0, 0, 0); // Set time to midnight
                return today;
            }

            // Get initial dates from the model (sent from controller)
            // Ensure they are formatted as YYYY-MM-dd from C# side for consistent parsing
            var initialStartDateString = '@(Model.StartDate.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture))';
            var initialEndDateString = '@(Model.EndDate.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture))';

            var initialStartDate = null;
            // Check if the date from the model is valid and not DateTime.MinValue
            if (initialStartDateString && initialStartDateString !== '0001-01-01') {
                initialStartDate = new Date(initialStartDateString + 'T00:00:00'); // Add time to avoid timezone issues
            } else {
                initialStartDate = getToday(); // Default to today if not set or MinValue
            }

            var initialEndDate = null;
            // Check if the date from the model is valid and not DateTime.MinValue
            if (initialEndDateString && initialEndDateString !== '0001-01-01') {
                initialEndDate = new Date(initialEndDateString + 'T00:00:00'); // Add time to avoid timezone issues
            } else {
                // Default to one month after start date if not set or MinValue
                initialEndDate = new Date(initialStartDate);
                initialEndDate.setMonth(initialEndDate.getMonth() + 1);
            }

            // Initialize StartDate Datepicker
            $('#startDatePicker').datepicker({
                dateFormat: 'mm/dd/yy', // Display format for the user (Month/Day/Year)
                altFormat: 'yy-mm-dd',   // Format for the hidden input that gets submitted to the server
                altField: '#StartDate',  // The ID of the original input (generated by asp-for="StartDate")
                changeMonth: true,
                changeYear: true,
                onSelect: function (selectedDateText, inst) {
                    var minDateForEnd = $(this).datepicker('getDate');
                    $('#endDatePicker').datepicker('option', 'minDate', minDateForEnd);

                    // If the current end date is before the new start date, adjust it
                    var currentEndDate = $('#endDatePicker').datepicker('getDate');
                    if (!currentEndDate || currentEndDate < minDateForEnd) {
                        $('#endDatePicker').datepicker('setDate', minDateForEnd);
                    }
                }
            });

            // Initialize EndDate Datepicker
            $('#endDatePicker').datepicker({
                dateFormat: 'mm/dd/yy', // Display format for the user (Month/Day/Year)
                altFormat: 'yy-mm-dd',   // Format for the hidden input that gets submitted to the server
                altField: '#EndDate',    // The ID of the original input (generated by asp-for="EndDate")
                changeMonth: true,
                changeYear: true,
                onSelect: function (selectedDateText, inst) {
                    var maxDateForStart = $(this).datepicker('getDate');
                    $('#startDatePicker').datepicker('option', 'maxDate', maxDateForStart);
                }
            });

            // Set initial values on the datepickers
            $('#startDatePicker').datepicker('setDate', initialStartDate);
            $('#endDatePicker').datepicker('setDate', initialEndDate);

            // Immediately apply min/max restrictions for initial validation
            // This ensures that if the user doesn't interact with the datepicker, rules are still applied.
            var currentStartDate = $('#startDatePicker').datepicker('getDate');
            if (currentStartDate) {
                $('#endDatePicker').datepicker('option', 'minDate', currentStartDate);
            }
            var currentEndDate = $('#endDatePicker').datepicker('getDate');
            if (currentEndDate) {
                $('#startDatePicker').datepicker('option', 'maxDate', currentEndDate);
            }
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
